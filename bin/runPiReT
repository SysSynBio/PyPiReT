#!/usr/bin/env python
"""
RNA seq pipeline.

wrapper for running RNASeq pipeline

"""

from __future__ import print_function
import os
import sys
import argparse
dir_path = os.path.dirname(os.path.realpath(__file__))
lib_path = os.path.abspath(os.path.join(dir_path, '..'))
# conda_path = os.path.abspath(os.path.join(lib_path, 'thirdParty/miniconda/lib/python2.7/site-packages'))
conda_path = os.path.abspath(os.path.join(lib_path, 'thirdParty/miniconda/bin'))
bin_path = os.path.join(lib_path, 'bin')
sys.path.append(lib_path)
# sys.path.append(conda_path)
os.environ["PATH"] += os.pathsep + bin_path
os.environ["PATH"] += os.pathsep + conda_path
# import logging
from pypiret import CheckDesign
from pypiret import FastQC
from pypiret import Map
from pypiret import Summ
import luigi
import pandas as pd
# from pypiret import logger


def cmdline_parser():
    """
    Create an argparse instance.

    Combination of different options for this script.
    """
    class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter,
                          argparse.RawDescriptionHelpFormatter):
        """For multiple formatters of argparse."""

        pass

    parser = argparse.ArgumentParser(formatter_class=CustomFormatter,
                                     prog='runPiReT',
                                     description="""Luigi based workflow for running
                                     RNASeq pipeline""",
                                     epilog="""
when selecting both kingodm runs, options that are required for both eukaryotes
and prokaryotes run are required.

Example run for Prokaryotes RNA seq:\n
        runPiReT -d <workdir> -e <design file>  -gp <gff> -i <hisat2 index>
        -k prokarya -m <EdgeR/Deseq2> -fp <FASTA>

Example run for Eukaryotes RNA seq:\n
        runPiReT -d <workdir> -e <design file>  -ge <gff> -i <hisat2 index>
        -k eukarya -m <EdgeR/Deseq2> -fe <FASTA>

Example run for Both (Eukaryotes and Prokaryotes) RNA seq:\n
        runPiReT -d <workdir> -e <design file>  -gp <gff> -ge <gff> -i <hisat2 index>
        -k both -m <EdgeR/Deseq2> -fe <FASTA> -fp <FASTA>
        """)

    parser.add_argument("-c", dest="CPU", help="""number of CPUs/threads to run per
        task. Here, task refers to a processing step. For example, number of CPUs
        specified here will be used for QC, HISAT index and mapping steps. Since QC
        and mapping steps are run for every sample, be aware that the total
        number of CPUs needed are your number of samples times CPU specified here.""",
                        required=False, default=1)

    required_args = parser.add_argument_group('required arguments')

    required_args.add_argument("-d", dest="WORKDIR", help="""working directory where all
        output files will be processed and written""", required=True)

    required_args.add_argument("-i", dest="INDEX_HISAT", help="""hisat2 index file, it only
        creates index if it does not exist""",
                               required=True, default=argparse.SUPPRESS)

    required_args.add_argument("-e", dest="EXPDSN", help="""tab delimited experimental
        design file""", required=True, default=argparse.SUPPRESS)

    required_prok_args = parser.add_argument_group('required arguments (for prokaryotes)')

    required_prok_args.add_argument("-fp", dest="FASTA_PROK", help="""fasta for Prokaryotic Ref
        erence""", required=False, default=None)

    required_prok_args.add_argument("-gp", dest="GFF_PROK", help="""path to gff files for prokar
        yotic organism""", required=False, default="")

    required_euk_args = parser.add_argument_group('required arguments (for eukaryotes)')

    required_euk_args.add_argument("-fe", dest="FASTA_EUK", help="""fasta for Eukaryotic Refe
        rence""", required=False, default=None)
    required_euk_args.add_argument("-ge", dest="GFF_EUK", help="""path to gff files for eukar
        yotic organism""", required=False, default="")

    parser.add_argument("-k", dest="TEST_KINGDOM", help="""which kingdom to test,
        when eukarya or both is chosen, it expects alternative splicing
        """, required=False, default='prokarya', choices=['prokarya', 'eukarya',
                                                          'both'])

    parser.add_argument("-m", dest="METHOD", help="""Method to use for detecting
        differentially expressed genes, Deseq2 requires 3 biological replicates
        and ballgown only processes eukaryotes""", required=False, default='ballEdge',
                        choices=['EdgeR', 'Deseq2', 'ballgown', 'DeEdge',
                                 'Degown', 'ballEdge', 'all'])

    parser.add_argument("-p", dest="P_VALUE", help="""P-Value to consider if genes
        are significantly different, default is 0.001""", required=False, default=0.001,
                        type=float)

    parser.add_argument("--scheduler", help="""when specified, will use luigi
        scheduler which allows you to keep track of task using an url
        specified through luigid""", required=False, default=True,
                        action='store_false')

    parser.add_argument("--qsub", help="""run the SGE version of the code, it
        currently is set to SGE with smp""", required=False,
                        action='store_true', default=False)

    return parser


def main():
    """
    Main function.

    All functions are called here.
    """
    parser = cmdline_parser()
    args = parser.parse_args()

    # process = logger.create_logger(args.WORKDIR, 'process', 'DEBUG')
    # error = logger.create_logger(args.WORKDIR, 'error', 'ERROR')

    # Getting absolute path of some directories
    workdir = os.path.abspath(args.WORKDIR)
    dir_path = os.path.dirname(os.path.realpath(__file__))
    bindir = os.path.abspath(os.path.join(dir_path, '..', 'bin'))
    scriptdir = os.path.abspath(os.path.join(dir_path, '..', 'scripts'))
    os.environ['PATH'] = os.environ['PATH'] + ":" + bindir

    if check_exp_design(args.EXPDSN) is True:
        no_of_jobs = len(CheckDesign(args.EXPDSN).extract_sample_fastqs())
        samp_dic = CheckDesign(args.EXPDSN).extract_sample_fastqs()
        if check_method(args.METHOD, args.EXPDSN) is True:

            # USER STORY 1A (SGE)
            if args.TEST_KINGDOM == 'prokarya':
                if all([args.TEST_KINGDOM == 'prokarya',
                        check_ref(ref_gff=args.GFF_PROK,
                                  ref_fasta=args.FASTA_PROK),
                        args.qsub]) is True:
                    luigi.interface.build([FastQC.SGERunAllQC(fastq_dic=samp_dic,
                                                              numCPUs=args.CPU,
                                                              workdir=args.WORKDIR,
                                                              shared_tmp_dir=workdir + "/.tmp"),
                                           Map.HisatIndex(args.FASTA_PROK,
                                                          args.INDEX_HISAT,
                                                          numCPUs=args.CPU)],
                                          local_scheduler=args.scheduler,
                                          workers=no_of_jobs)
            # USER STORY 1B
                elif (all([args.TEST_KINGDOM == 'prokarya',
                           check_ref(ref_gff=args.GFF_PROK,
                                     ref_fasta=args.FASTA_PROK)]) is True and
                        args.qsub is False):
                    luigi.interface.build([
                        FastQC.RunAllQC(fastq_dic=samp_dic,
                                        numCPUs=args.CPU,
                                        workdir=workdir,
                                        scriptdir=scriptdir),
                        Map.HisatIndex(fasta=args.FASTA_PROK,
                                       hi_index=args.INDEX_HISAT,
                                       bindir=bindir,
                                       numCPUs=args.CPU),
                        Map.GFF2GTF(gff_file=args.GFF_PROK,
                                    bindir=bindir,
                                    workdir=workdir)
                    ], local_scheduler=args.scheduler,
                        workers=no_of_jobs)

                    luigi.interface.build([
                        Map.HisatMapW(fastq_dic=samp_dic,
                                      numCPUs=args.CPU,
                                      indexfile=args.INDEX_HISAT,
                                      bindir=bindir,
                                      workdir=args.WORKDIR,
                                      scriptdir=scriptdir,
                                      ref_file=args.FASTA_PROK)],
                        local_scheduler=args.scheduler,
                        workers=no_of_jobs)

                    luigi.interface.build([
                        Map.SAM2BAMfileW(fastq_dic=samp_dic,
                                          numCPUs=args.CPU,
                                          indexfile=args.INDEX_HISAT,
                                          bindir=bindir,
                                          workdir=args.WORKDIR,
                                          scriptdir=scriptdir,
                                          ref_file=args.FASTA_PROK)],
                                          local_scheduler=args.scheduler,
                                          workers=no_of_jobs)

                    luigi.interface.build([
                        Map.SortBAMfileW(fastq_dic=samp_dic,
                                         numCPUs=args.CPU,
                                         indexfile=args.INDEX_HISAT,
                                         bindir=bindir,
                                         workdir=args.WORKDIR,
                                         scriptdir=scriptdir,
                                         ref_file=args.FASTA_PROK)],
                        local_scheduler=args.scheduler,
                        workers=no_of_jobs)

                    luigi.interface.build([
                        Map.StringTieScoresW(fastq_dic=samp_dic,
                                             numCPUs=args.CPU,
                                             indexfile=args.INDEX_HISAT,
                                             bindir=bindir,
                                             workdir=args.WORKDIR,
                                             scriptdir=scriptdir,
                                             ref_file=args.FASTA_PROK,
                                             gff_file=args.GFF_PROK,
                                             kingdom=args.TEST_KINGDOM)],
                                          local_scheduler=args.scheduler,
                                          workers=no_of_jobs)

                    luigi.interface.build([
                        Summ.FeatureCountsW(fastq_dic=samp_dic,
                                            numCPUs=args.CPU,
                                            euk_gff=args.GFF_EUK,
                                            prok_gff=args.GFF_PROK,
                                            indexfile=args.INDEX_HISAT,
                                            kingdom=args.TEST_KINGDOM,
                                            workdir=workdir,
                                            bindir=bindir),
                        Summ.MergeStringTies(fastq_dic=samp_dic,
                                             numCPUs=args.CPU,
                                             indexfile=args.INDEX_HISAT,
                                             bindir=bindir,
                                             workdir=args.WORKDIR,
                                             scriptdir=scriptdir,
                                             ref_file=args.FASTA_PROK,
                                             gff_file=args.GFF_PROK,
                                             kingdom=args.TEST_KINGDOM)
                    ], local_scheduler=args.scheduler, workers=2)

                    luigi.interface.build([
                        Summ.ReStringTieScoresW(fastq_dic=samp_dic,
                                                numCPUs=args.CPU,
                                                indexfile=args.INDEX_HISAT,
                                                bindir=bindir,
                                                workdir=args.WORKDIR,
                                                scriptdir=scriptdir,
                                                ref_file=args.FASTA_PROK,
                                                gff_file=args.GFF_PROK,
                                                kingdom=args.TEST_KINGDOM)],
                                          local_scheduler=args.scheduler,
                                          workers=no_of_jobs)

            # USER STORY 2A (SGE)
            elif args.TEST_KINGDOM == 'eukarya':
                if all([args.TEST_KINGDOM == 'eukarya',
                        check_ref(ref_gff=args.GFF_EUK,
                                  ref_fasta=args.FASTA_EUK),
                        args.qsub]) is True:
                    luigi.interface.build([FastQC.SGERunAllQC(fastq_dic=samp_dic,
                                                              numCPUs=args.CPU,
                                                              workdir=workdir,
                                                              shared_tmp_dir=workdir + "/.tmp"),
                                           Map.HisatIndex(args.FASTA_EUK, numCPUs=args.CPU)],
                                          local_scheduler=args.scheduler,
                                          workers=no_of_jobs)
            # USER STORY 2B
                elif (all([args.TEST_KINGDOM == 'eukarya',
                           check_ref(ref_gff=args.GFF_EUK,
                                     ref_fasta=args.FASTA_EUK)]) is True and
                      args.qsub is False):
                    luigi.interface.build([
                        FastQC.RunAllQC(fastq_dic=samp_dic,
                                        numCPUs=args.CPU,
                                        workdir=workdir,
                                        scriptdir=scriptdir),
                        Map.HisatIndex(fasta=args.FASTA_EUK,
                                       hi_index=args.INDEX_HISAT,
                                       bindir=bindir,
                                       numCPUs=args.CPU),
                        Map.GFF2GTF(gff_file=args.GFF_EUK,
                                    bindir=bindir,
                                    workdir=workdir),
                        Map.CreateSplice(gff_file=args.GFF_EUK,
                                         bindir=bindir,
                                         workdir=workdir,
                                         scriptdir=scriptdir)],
                        local_scheduler=args.scheduler,
                        workers=no_of_jobs)

                    luigi.interface.build([
                        Map.HisatMapW(fastq_dic=samp_dic,
                                      numCPUs=args.CPU,
                                      indexfile=args.INDEX_HISAT,
                                      bindir=bindir,
                                      workdir=args.WORKDIR,
                                      scriptdir=scriptdir,
                                      ref_file=args.FASTA_EUK)],
                        local_scheduler=args.scheduler,
                        workers=no_of_jobs)

                    luigi.interface.build([
                        Map.SAM2BAMfileW(fastq_dic=samp_dic,
                                          numCPUs=args.CPU,
                                          indexfile=args.INDEX_HISAT,
                                          bindir=bindir,
                                          workdir=args.WORKDIR,
                                          scriptdir=scriptdir,
                                          ref_file=args.FASTA_EUK)],
                                          local_scheduler=args.scheduler,
                                          workers=no_of_jobs)

                    luigi.interface.build([
                        Map.SortBAMfileW(fastq_dic=samp_dic,
                                         numCPUs=args.CPU,
                                         indexfile=args.INDEX_HISAT,
                                         bindir=bindir,
                                         workdir=args.WORKDIR,
                                         scriptdir=scriptdir,
                                         ref_file=args.FASTA_EUK)],
                        local_scheduler=args.scheduler,
                        workers=no_of_jobs)

                    luigi.interface.build([
                        Map.StringTieScoresW(fastq_dic=samp_dic,
                                             numCPUs=args.CPU,
                                             indexfile=args.INDEX_HISAT,
                                             bindir=bindir,
                                             workdir=args.WORKDIR,
                                             scriptdir=scriptdir,
                                             ref_file=args.FASTA_EUK,
                                             gff_file=args.GFF_EUK,
                                             kingdom=args.TEST_KINGDOM)],
                                          local_scheduler=args.scheduler,
                                          workers=no_of_jobs)

                    luigi.interface.build([
                        # Summ.FeatureCountsW(fastq_dic=samp_dic,
                        #                     numCPUs=args.CPU,
                        #                    euk_gff=args.GFF_EUK,
                        #                    prok_gff=args.GFF_PROK,
                        #                    indexfile=args.INDEX_HISAT,
                        #                    kingdom=args.TEST_KINGDOM,
                        #                    workdir=workdir,
                        #                    bindir=bindir),
                        Summ.MergeStringTies(fastq_dic=samp_dic,
                                             numCPUs=args.CPU,
                                             indexfile=args.INDEX_HISAT,
                                             bindir=bindir,
                                             workdir=args.WORKDIR,
                                             scriptdir=scriptdir,
                                             ref_file=args.FASTA_EUK,
                                             gff_file=args.GFF_EUK,
                                             kingdom=args.TEST_KINGDOM)
                    ], local_scheduler=args.scheduler, workers=2)

                    luigi.interface.build([
                        Summ.ReStringTieScoresW(fastq_dic=samp_dic,
                                                numCPUs=args.CPU,
                                                indexfile=args.INDEX_HISAT,
                                                bindir=bindir,
                                                workdir=args.WORKDIR,
                                                scriptdir=scriptdir,
                                                ref_file=args.FASTA_EUK,
                                                gff_file=args.GFF_EUK,
                                                kingdom=args.TEST_KINGDOM)],
                                          local_scheduler=args.scheduler,
                                          workers=no_of_jobs)

            # USER STORY 3A (SGE)
            elif args.TEST_KINGDOM == 'both':
                if all([args.TEST_KINGDOM == 'both',
                        check_ref(ref_gff=args.GFF_EUK,
                                  ref_fasta=args.FASTA_EUK),
                        check_ref(ref_gff=args.GFF_PROK,
                                  ref_fasta=args.FASTA_PROK),
                        args.qsub]) is True:
                    luigi.interface.build([
                        FastQC.SGERunAllQC(fastq_dic=samp_dic,
                                           numCPUs=args.CPU,
                                           workdir=workdir,
                                           shared_tmp_dir=workdir + "/.tmp"),
                        Map.HisatIndex(args.FASTA_PROK, numCPUs=args.CPU)],
                        local_scheduler=args.scheduler,
                        workers=no_of_jobs)
            # USER STORY 3B
                elif (all([args.TEST_KINGDOM == 'both',
                           check_ref(ref_gff=args.GFF_EUK,
                                     ref_fasta=args.FASTA_EUK),
                           check_ref(ref_gff=args.GFF_PROK,
                                     ref_fasta=args.FASTA_PROK)]) is True and
                      args.qsub is False):
                    luigi.interface.build([
                        FastQC.RunAllQC(fastq_dic=samp_dic,
                                        numCPUs=args.CPU,
                                        workdir=workdir,
                                        scriptdir=scriptdir),
                        Map.HisatIndex(fasta=",".join([args.FASTA_PROK, args.FASTA_EUK]),
                                       hi_index=args.INDEX_HISAT,
                                       bindir=bindir,
                                       numCPUs=args.CPU),
                        Map.GFF2GTF(gff_file=args.GFF_EUK,
                                    bindir=bindir,
                                    workdir=workdir),
                        Map.GFF2GTF(gff_file=args.GFF_PROK,
                                    bindir=bindir,
                                    workdir=workdir),
                        Map.CreateSplice(gff_file=args.GFF_EUK,
                                         bindir=bindir,
                                         workdir=workdir,
                                         scriptdir=scriptdir),
                        Map.GetChromName(prok_ref=args.FASTA_PROK,
                                         euk_ref=args.FASTA_EUK,
                                         workdir=workdir)],
                        local_scheduler=args.scheduler,
                        workers=no_of_jobs)

                    luigi.interface.build([
                        Map.HisatMapW(fastq_dic=samp_dic,
                                      numCPUs=args.CPU,
                                      indexfile=args.INDEX_HISAT,
                                      workdir=workdir,
                                      bindir=bindir,
                                      scriptdir=scriptdir,
                                      ref_file=",".join([args.FASTA_PROK, args.FASTA_EUK]))],
                        local_scheduler=args.scheduler, workers=no_of_jobs)

                    luigi.interface.build([
                        Map.SAM2BAMfileW(fastq_dic=samp_dic,
                                          numCPUs=args.CPU,
                                          indexfile=args.INDEX_HISAT,
                                          bindir=bindir,
                                          workdir=args.WORKDIR,
                                          scriptdir=scriptdir,
                                          ref_file=",".join([args.FASTA_PROK, args.FASTA_EUK])),
                        Map.SortBAMfileW(fastq_dic=samp_dic,
                                         numCPUs=args.CPU,
                                         indexfile=args.INDEX_HISAT,
                                         bindir=bindir,
                                         workdir=args.WORKDIR,
                                         scriptdir=scriptdir,
                                         ref_file=",".join([args.FASTA_PROK, args.FASTA_EUK])),
                        Map.GetRefNames(fastq_dic=samp_dic,
                                        numCPUs=args.CPU,
                                        indexfile=args.INDEX_HISAT,
                                        bindir=bindir,
                                        workdir=args.WORKDIR,
                                        scriptdir=scriptdir,
                                        ref_file=",".join([args.FASTA_PROK, args.FASTA_EUK])),
                        Map.SplitBAMBoth(fastq_dic=samp_dic,
                                         numCPUs=args.CPU,
                                         indexfile=args.INDEX_HISAT,
                                         bindir=bindir,
                                         workdir=args.WORKDIR,
                                         scriptdir=scriptdir,
                                         ref_file=",".join([args.FASTA_PROK, args.FASTA_EUK])),
                        Map.SplitProkEukBoth(fastq_dic=samp_dic,
                                             numCPUs=args.CPU,
                                             indexfile=args.INDEX_HISAT,
                                             bindir=bindir,
                                             workdir=args.WORKDIR,
                                             scriptdir=scriptdir,
                                             ref_file=",".join([args.FASTA_PROK, args.FASTA_EUK])),
                        Map.MergeBAMfileBoth(fastq_dic=samp_dic,
                                             numCPUs=args.CPU,
                                             indexfile=args.INDEX_HISAT,
                                             bindir=bindir,
                                             workdir=args.WORKDIR,
                                             scriptdir=scriptdir,
                                             ref_file=",".join([args.FASTA_PROK, args.FASTA_EUK])),
                        Map.StringTieScoresW(fastq_dic=samp_dic,
                                             numCPUs=args.CPU,
                                             indexfile=args.INDEX_HISAT,
                                             gff_file=";".join(
                                                 [args.GFF_PROK, args.GFF_EUK]),
                                             kingdom=args.TEST_KINGDOM,
                                             workdir=args.WORKDIR,
                                             bindir=bindir,
                                             scriptdir=scriptdir,
                                             ref_file=",".join([args.FASTA_PROK, args.FASTA_EUK])),
                        Summ.FeatureCounts(fastq_dic=samp_dic,
                                           numCPUs=args.CPU,
                                           euk_gff=args.GFF_EUK,
                                           prok_gff=args.GFF_PROK,
                                           indexfile=args.INDEX_HISAT,
                                           kingdom='prokarya',
                                           workdir=workdir,
                                           bindir=bindir),
                        Summ.FeatureCounts(fastq_dic=samp_dic,
                                           numCPUs=args.CPU,
                                           euk_gff=args.GFF_EUK,
                                           prok_gff=args.GFF_PROK,
                                           indexfile=args.INDEX_HISAT,
                                           kingdom='eukarya',
                                           workdir=workdir,
                                           bindir=bindir)
                    ], local_scheduler=args.scheduler, workers=no_of_jobs)

                    luigi.interface.build([
                        # Summ.FeatureCounts(fastq_dic=samp_dic,
                        #                    numCPUs=args.CPU,
                        #                    euk_gff=args.GFF_EUK,
                        #                    prok_gff=args.GFF_PROK,
                        #                    indexfile=args.INDEX_HISAT,
                        #                    kingdom=args.'prokarya',
                        #                    workdir=workdir,
                        #                    bindir=bindir),
                        Summ.MergeStringTies(fastq_dic=samp_dic,
                                             numCPUs=args.CPU,
                                             indexfile=args.INDEX_HISAT,
                                             bindir=bindir,
                                             workdir=args.WORKDIR,
                                             scriptdir=scriptdir,
                                             ref_file=",".join([args.FASTA_PROK,
                                                                args.FASTA_EUK]),
                                             gff_file=";".join(
                                                 [args.GFF_PROK, args.GFF_EUK]),
                                             kingdom=args.TEST_KINGDOM)
                    ], local_scheduler=args.scheduler, workers=2)

                    luigi.interface.build([
                        Summ.ReStringTieScoresW(fastq_dic=samp_dic,
                                                numCPUs=args.CPU,
                                                indexfile=args.INDEX_HISAT,
                                                bindir=bindir,
                                                workdir=args.WORKDIR,
                                                scriptdir=scriptdir,
                                                ref_file=",".join([args.FASTA_PROK,
                                                                   args.FASTA_EUK]),
                                                gff_file=";".join(
                                                    [args.GFF_PROK, args.GFF_EUK]),
                                                kingdom=args.TEST_KINGDOM)],
                                          local_scheduler=args.scheduler,
                                          workers=no_of_jobs)


def check_exp_design(exp_design_file):
    """A function that checks different aspects of experimental des. file.

    it returns True if all checked conditions are True. This is the first step
    of the pipeline.
    """
    exp_desn = CheckDesign(exp_design_file)
    if all([exp_desn.tab(),
            exp_desn.header(),
            exp_desn.sample_name(),
            exp_desn.file_name(),
            exp_desn.group_name(),
            exp_desn.sample_name(),
            exp_desn.fastq_exists()]) is True:
        return True


def check_index_file(indexfile):
    """Check if index file is present."""
    hisat_file = indexfile + '.6.ht2l'
    if os.path.exists(hisat_file):
        return True
    else:
        return False


def check_method(method, exp_design_file):
    """Based on chosen method, if enough samples are present."""
    exp_desn = CheckDesign(exp_design_file)
    if method in ('Deseq2', 'all', 'Degown', 'DeEdge') and exp_desn.sample_suff(method='Deseq'):
        return True
    elif method in ('EdgeR', 'ballgown'):
        return True
    else:
        sys.exit("Deseq2 requires at least three replicates within a group!")


def check_ref(ref_fasta=None, ref_gff=None):
    """Check if refs are present."""
    if ',' in ref_fasta:
        if all([os.path.exists(f) for f in ref_fasta.split(",")]) is True:
            pass
        else:
            sys.exit("Reference(s) do not exist!")
    if ',' in ref_gff:
        if all([os.path.exists(f) for f in ref_gff.split(",")]) is True:
            return True
        else:
            sys.exit("Reference(s) do not exist!")
    else:
        if os.path.exists(ref_gff) and os.path.exists(ref_fasta):
            return True
        else:
            sys.exit("Reference(s) do not exist!")


if __name__ == '__main__':
    main()
